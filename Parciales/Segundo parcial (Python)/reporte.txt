Parcial - tema1

Nota: 5.12 / 10.0 (DESAPROBADO)

puntaje ej1: 0.0
puntaje ej2: 2.25
puntaje ej3: 1.12
puntaje ej4: 0.75
puntaje ej5: 1

Enunciado
Parcial Python - Tema 1
Importante

    El parcial se aprueba con 6 puntos
    Template de funciones a implementar acá
    Lista de funciones permitidas acá
    Para testear el código pueden usar este archivo que ya cuenta con todo lo necesario para desarrollar sus propios tests (este archivo no se entrega)

Implementar las siguientes especificaciones en Python.
1) Ejercicio 1 [2.25 puntos]

Implementar la función subsecuencia_mas_larga especificada.

problema subsecuencia_mas_larga (in v: seq⟨Z⟩) : ZxZ {
  requiere: { La longitud de v es distinto de 0 }
  asegura: { Sea x la primera subsecuencia más larga en v tal que vale todos_consecutivos(x), la primera componente de res es igual a |x| y la segunda es igual al índice en v donde comenzaría x }
}

problema todos_consecutivos (in v: seq⟨Z⟩) : Bool {
  asegura: { res == True <==> cada par de elementos adyacentes en v son números consecutivos, es decir, que su diferencia es igual a 1 }
}
2) Ejercicio 2 [2.25 puntos]

Ana tiene exámenes de respuesta Verdadero ó Falso. Ella sabe que en cada examen la cantidad de respuestas correctas cuyo valor es Falso es igual a la cantidad de respuestas correctas cuyo valor es Verdadero. Tenemos el historial de las respuestas de cada exámen dados por Ana en una cola. En cada uno Ana respondió todas las preguntas.

problema mejor_resultado_de_ana (in examenes: Cola⟨ seq⟨Bool⟩ ⟩) : seq⟨Z⟩ {
  requiere:{ Cada elemento de examenes es no vacío y tiene longitud par }
  asegura: { res tiene la misma cantidad de elementos que examenes }
  asegura: { res[i] es igual a la máxima cantidad de respuestas correctas que Ana podría haber respondido en el i-ésimo exámen resuelto en examenes, para 0 <= i < cantidad de elementos de examenes }
}

3) Ejercicio 3 [2.25 puntos]

problema cambiar_matriz(inout A: seq⟨seq⟨Z⟩⟩) {
  requiere: { Todas las filas de A tienen la misma longitud }
  requiere: { El mínimo número que aparece en A es igual a 1 }
  requiere: { El máximo número que aparece en A es igual a #filas de A por #columnas de A }
  requiere: { No hay enteros repetidos en A }
  requiere: { Existen al menos dos enteros distintos en A }
  modifica: { A }
  asegura: { A tiene exactamente las mismas dimensiones que A@pre }
  asegura: { El conjunto de elementos que aparecen en A es igual al conjunto de elementos que aparecen en A@pre }
  asegura: { A[i][j] != A@pre[i][j] para todo i, j en rango }
}
4) Ejercicio 4 [2.25 puntos]

Tenemos un texto que contiene palabras. Por simplicidad, las palabras están separadas únicamente por uno o más espacios.

problema palabras_por_vocales (in texto: string): Diccionario⟨Z,Z⟩ {
  requiere: { Si existe una letra vocal en texto, esta no lleva tildes, diéresis, ni ningún otro símbolo }
  asegura: { Si existe una palabra en texto con x vocales en total, x es clave de res }
  asegura: { Las claves de res representan la cantidad total de vocales de una palabra, y cada valor corresponde a la cantidad de palabras en texto con ese número de vocales. }
  asegura: { Los valores de res son positivos }
}
5) Pregunta teórica (1 punto)

Conteste marcando la opción correcta.
¿Por qué en Paradigma Imperativo no existe la transparencia referencial?

Utilizamos otro mecanismo de repetición de código, en lugar de recursión usamos la iteración (FOR, WHILE, DO WHILE).
Tenemos una nueva instrucción, la asignación, que nos permite cambiar el valor de una variable X
El orden en que se ejecutan las instrucciones del programa es diferente
Adjunta el archivo con tu solución:

Solo se puede adjuntar 1 archivo de extensión .py. En caso de haber desarrollado tests propios, no deben ser entregados.
Seleccionar archivo a enviar:
Solucion entregada por el alumno

from queue import Queue as Cola
from queue import LifoQueue as Pila

# Ejercicio 1
def subsecuencia_mas_larga(v: list[int]) -> tuple[int,int]:
    longitud: int = len(v)
    lista_aux: list[int] = []
    indice: int = 0
    tuplas: list[tuple[int, int]] = []
    num: int = 0
    for contador in range(1, longitud, 1):
        if indice == contador - 1:
            lista_aux.append(v[indice])
        res: tuple[int, int] = [num, indice]
        lista_aux.append(v[contador])
        if todos_consecutivos(lista_aux):
            num = len(lista_aux)
            continue
        else:
            indice = contador
            lista_aux.clear()
            tuplas.append(res)
            res = [0, 0]
    if contador + 1 == longitud:
        indice = contador
        lista_aux.clear()
        tuplas.append(res)
        res = [0, 0]
    if len(tuplas) == 0:
        return res
    else:
        return maximo_tupla(tuplas)
def maximo_tupla(tuplas: list[tuple[int,int]]):
    maximo: int = 0
    res: tuple[int, int] = [0, 0]
    for i in tuplas:
        if i[0] >= res[0]:
            res = i
    return res
def todos_consecutivos(v: list[int]) -> bool:
    res: bool = False
    for i in range(len(v)-1):
        if v[i] == v[i+1] - 1:
            res = True
        else:
            res = False
            break
    return res
print (subsecuencia_mas_larga([1,2,4,5,6]))
# Ejercicio 2
def contador(examen: list[bool]) -> int:
    longitud: int = len(examen)
    verdaderas: bool = 0
    falsas: bool = 0
    res: int = 0
    for i in examen:
        if i == True:
            verdaderas += 1
        else:
            falsas += 1
    if verdaderas > longitud/2:
        res = longitud - (verdaderas - longitud/2)
    else:
        res = longitud - (falsas - longitud/2)
    return res

def mejor_resultado_de_ana(examenes: Cola[list[bool]]) -> list[int]:
    cola_Aux: Cola[list[bool]] = Cola()
    res: list[int] = []
    while not examenes.empty():
        auxiliar: list[bool] = examenes.get()
        cola_Aux.put(auxiliar)
        res.append(contador(auxiliar))
    while not cola_Aux.empty():
        examenes.put(cola_Aux.get())
    return res
# Ejercicio 3
def conjunto_matriz(matriz: list[list[int]]) -> list[int]:
    res: list[int] = []
    for i in range(len(matriz)):
        for j in range(len(matriz[0])):
            if not pertenece_lista(res, matriz[i][j]):
                res.append(matriz[i][j])
    return res
def pertenece_lista(lista: list[int], num:int) -> bool:
    res: bool = False
    for i in lista:
        if i == num:
            res = True
            break
    return res
def cambiar_matriz(A: list[list[int]]) -> None:
    auxiliar: list[list[int]] = A.copy()
    conjunto: list[int] = conjunto_matriz(auxiliar)
    longitud: int = len(conjunto) - 1
    contador: int = 0
    #A = A.clear()
    for i in range(len(auxiliar)):
        for j in range(len(auxiliar[0])):
            A[i][j] = conjunto[longitud - contador]
            contador += 1
    return A
# Ejercicio 4
def pertenece_str(lista: list[str], caracter: str) -> bool:
    res: bool = False
    for i in lista:
        if i == caracter:
            res = True
            break
    return res
def quitar_str(palabras: list[str], caracter:str) -> list[str]:
    res: list[str] = []
    for palabra in palabras:
        if palabra != caracter:
            res.append(palabra)
    return res
def contador_vocales(palabra: str) -> int:
    vocales: list[str] = ["a","e","i","o","u","A","E","I","O","U"]
    contador: int = 0
    for letra in palabra:
        if pertenece_str(vocales, letra):
            contador += 1
    return contador
def separa_texto_en_palabras(texto: str) -> list[str]:
    palabras: list[str] = []
    palabra: str = ""
    for letra in texto:
        if letra != " ":
            palabra += letra
        else:
            palabras.append(palabra)
            palabra = ""
    return palabras
#texto = "Hola Como  estas"
#print (separa_texto_en_palabras(texto))

def palabras_por_vocales(texto: str) -> dict[int, int]:
    auxiliar: str = texto
    res: dict[int, int]
    return {}

Resultado de la compilacion


Ejecucion de los tests
tema1-test-ej1.py.compilacion.out

Puntaje del ej: 0.0 / 2.25

test_baja (__main__.Ej1Test) ... FAIL
test_caso_base_neg (__main__.Ej1Test) ... ERROR
test_caso_base_pos (__main__.Ej1Test) ... ERROR
test_empates (__main__.Ej1Test) ... FAIL
test_empates_y_chicos (__main__.Ej1Test) ... FAIL
test_sube (__main__.Ej1Test) ... FAIL
test_una_solucion_chica_al_final (__main__.Ej1Test) ... FAIL
test_una_solucion_full (__main__.Ej1Test) ... FAIL

======================================================================
ERROR: test_caso_base_neg (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej1.py", line 24, in test_caso_base_neg
    res = subsecuencia_mas_larga(entrada)
  File "./correcciones/submissions/capart_valentin_43754372/solucion.py", line 24, in subsecuencia_mas_larga
    if contador + 1 == longitud:
UnboundLocalError: local variable 'contador' referenced before assignment

======================================================================
ERROR: test_caso_base_pos (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej1.py", line 32, in test_caso_base_pos
    res = subsecuencia_mas_larga(entrada)
  File "./correcciones/submissions/capart_valentin_43754372/solucion.py", line 24, in subsecuencia_mas_larga
    if contador + 1 == longitud:
UnboundLocalError: local variable 'contador' referenced before assignment

======================================================================
FAIL: test_baja (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej1.py", line 49, in test_baja
    self.assertEqual(res, salida)
AssertionError: [0, 0] != (3, 0)

======================================================================
FAIL: test_empates (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej1.py", line 73, in test_empates
    self.assertEqual(res, salida)
AssertionError: [2, 7] != (4, 1)

======================================================================
FAIL: test_empates_y_chicos (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej1.py", line 81, in test_empates_y_chicos
    self.assertEqual(res, salida)
AssertionError: [0, 0] != (1, 0)

======================================================================
FAIL: test_sube (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej1.py", line 41, in test_sube
    self.assertEqual(res, salida)
AssertionError: [2, 0] != (3, 0)

======================================================================
FAIL: test_una_solucion_chica_al_final (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej1.py", line 65, in test_una_solucion_chica_al_final
    self.assertEqual(res, salida)
AssertionError: [0, 8] != (2, 8)

======================================================================
FAIL: test_una_solucion_full (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej1.py", line 57, in test_una_solucion_full
    self.assertEqual(res, salida)
AssertionError: [4, 5] != (10, 0)

----------------------------------------------------------------------
Ran 8 tests in 0.008s

FAILED (failures=6, errors=2)

tema1-test-ej2.py.compilacion.out

Puntaje del ej: 2.25 / 2.25

test_caso_base (__main__.Ej2Test) ... ok
test_mas_falsos_que_verdaderos (__main__.Ej2Test) ... ok
test_mas_verdaderos_que_falsos (__main__.Ej2Test) ... ok
test_mitad_y_mitad_respuestas (__main__.Ej2Test) ... ok
test_no_rompe_la_cola (__main__.Ej2Test) ... ok
test_todos_iguales_respuestas (__main__.Ej2Test) ... ok

----------------------------------------------------------------------
Ran 6 tests in 0.006s

OK

tema1-test-ej3.py.compilacion.out

Puntaje del ej: 1.12 / 2.25

test_matriz_mas_columnas_que_filas (__main__.Ej1Test) ... FAIL
test_matriz_mas_filas_que_columnas (__main__.Ej1Test) ... ok
test_no_devuelven_nada (__main__.Ej1Test) ... FAIL
test_todas_las_matrices_de_2_por_2 (__main__.Ej1Test) ... ok

======================================================================
FAIL: test_matriz_mas_columnas_que_filas (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej3.py", line 90, in test_matriz_mas_columnas_que_filas
    self.assertTrue( cumple_los_asegura(entrada_copia, entrada) )
AssertionError: False is not true

======================================================================
FAIL: test_no_devuelven_nada (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej3.py", line 97, in test_no_devuelven_nada
    self.assertEqual( salida, None )
AssertionError: [[4, 3], [2, 1]] != None

----------------------------------------------------------------------
Ran 4 tests in 0.005s

FAILED (failures=2)

tema1-test-ej4.py.compilacion.out

Puntaje del ej: 0.75 / 2.25

test_caso_base (__main__.Ej1Test) ... ok
test_texto_con_una_palabra (__main__.Ej1Test) ... FAIL
test_texto_con_una_palabra_y_espacios (__main__.Ej1Test) ... FAIL
test_texto_palabras_de_una_letra (__main__.Ej1Test) ... FAIL
test_texto_sin_palabras (__main__.Ej1Test) ... ok
test_una_palabra_caracteres_raros (__main__.Ej1Test) ... FAIL

======================================================================
FAIL: test_texto_con_una_palabra (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej4.py", line 41, in test_texto_con_una_palabra
    self.assertDictEqualWithUnorderedLists(res, salida)
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej4.py", line 105, in assertDictEqualWithUnorderedLists
    self.assertEqual(dict1.keys(), dict2.keys(), "Los diccionarios tienen distintias claves.")
AssertionError: dict_keys([]) != dict_keys([6]) : Los diccionarios tienen distintias claves.

======================================================================
FAIL: test_texto_con_una_palabra_y_espacios (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej4.py", line 50, in test_texto_con_una_palabra_y_espacios
    self.assertDictEqualWithUnorderedLists(res, salida)
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej4.py", line 105, in assertDictEqualWithUnorderedLists
    self.assertEqual(dict1.keys(), dict2.keys(), "Los diccionarios tienen distintias claves.")
AssertionError: dict_keys([]) != dict_keys([6]) : Los diccionarios tienen distintias claves.

======================================================================
FAIL: test_texto_palabras_de_una_letra (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej4.py", line 101, in test_texto_palabras_de_una_letra
    self.assertDictEqualWithUnorderedLists(res, salida)
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej4.py", line 105, in assertDictEqualWithUnorderedLists
    self.assertEqual(dict1.keys(), dict2.keys(), "Los diccionarios tienen distintias claves.")
AssertionError: dict_keys([]) != dict_keys([0, 1]) : Los diccionarios tienen distintias claves.

======================================================================
FAIL: test_una_palabra_caracteres_raros (__main__.Ej1Test)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej4.py", line 73, in test_una_palabra_caracteres_raros
    self.assertDictEqualWithUnorderedLists(res, salida)
  File "/home/asansone/.local/lib/python3.10/site-packages/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "./correcciones/submissions/capart_valentin_43754372/tema1-test-ej4.py", line 105, in assertDictEqualWithUnorderedLists
    self.assertEqual(dict1.keys(), dict2.keys(), "Los diccionarios tienen distintias claves.")
AssertionError: dict_keys([]) != dict_keys([0]) : Los diccionarios tienen distintias claves.

----------------------------------------------------------------------
Ran 6 tests in 0.008s

FAILED (failures=4)

mchoice.json-ej5.compilacion.out

Puntaje del ej: 1 / 1

mchoice ej5: respuesta del alumno=2, respuesta correcta=2

Ran 1 test in 0 seconds

OK

FIN